import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {

    /*
     * Complete the runningMedian function below.
     */
    static double[] runningMedian(int[] a) {


        List<Integer> temp = new ArrayList<>();

        double[] runningMedian = new double[a.length];
        for(int i = 0;i<a.length;i++){
            temp.add(a[i]);
            runningMedian[i] = findMedian(temp);
        }

        return runningMedian;
    }


    public static double findMedian(List<Integer> temp){
        temp.sort(Integer::compareTo);

        if(temp.size()%2==1){
            return (double)temp.get(temp.size()/2);
        }else{
            return (double)(temp.get(temp.size()/2) + temp.get((temp.size()/2)-1))/2;

        }
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int aCount = Integer.parseInt(scanner.nextLine().trim());

        int[] a = new int[aCount];

        for (int aItr = 0; aItr < aCount; aItr++) {
            int aItem = Integer.parseInt(scanner.nextLine().trim());
            a[aItr] = aItem;
        }

        double[] result = runningMedian(a);

        for (int resultItr = 0; resultItr < result.length; resultItr++) {
            bufferedWriter.write(String.valueOf(result[resultItr]));

            if (resultItr != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();
    }
}
